CLASS ew net/minecraft/core/BlockPos
	CLASS 1 1
		FIELD a cursor Lez;
		FIELD b nextPos Lew$a;
		FIELD c val$minX I
		FIELD d val$minY I
		FIELD e val$minZ I
		FIELD f val$maxX I
		FIELD g val$maxY I
		FIELD h val$maxZ I
		METHOD <init> <init> (JIIIIIII)V
		METHOD tryAdvance tryAdvance (Ljava/util/function/Consumer;)Z
	CLASS 2 2
		FIELD a cursor Lez;
		FIELD b nextPos Lew$a;
		FIELD c val$minX I
		FIELD d val$minY I
		FIELD e val$minZ I
		FIELD f val$maxX I
		FIELD g val$maxY I
		FIELD h val$maxZ I
		METHOD <init> <init> (IIIIII)V
		METHOD a computeNext ()Lew;
		METHOD computeNext computeNext ()Ljava/lang/Object;
	CLASS 3 3
		FIELD a $SwitchMap$net$minecraft$world$level$block$Rotation [I
		METHOD <clinit> <clinit> ()V
	CLASS a MutableBlockPos
		FIELD b x I
		FIELD c y I
		FIELD d z I
		METHOD <init> <init> ()V
		METHOD <init> <init> (DDD)V
		METHOD <init> <init> (III)V
		METHOD <init> <init> (Lew;)V
		METHOD a offset (DDD)Lew;
		METHOD a multiply (I)Lew;
		METHOD a set (Laio;)Lew$a;
		METHOD a rotate (Lbrg;)Lew;
		METHOD a set (Lev;III)Lew$a;
		METHOD a relative (Lfb$a;I)Lew;
		METHOD a relative (Lfb;I)Lew;
		METHOD b offset (DDD)Lfs;
		METHOD b offset (III)Lew;
		METHOD b relative (Lfb$a;I)Lfs;
		METHOD b relative (Lfb;)Lfs;
		METHOD b relative (Lfb;I)Lfs;
		METHOD c set (DDD)Lew$a;
		METHOD c offset (III)Lfs;
		METHOD c move (Lfb;)Lew$a;
		METHOD c move (Lfb;I)Lew$a;
		METHOD d set (III)Lew$a;
		METHOD d cross (Lfs;)Lfs;
		METHOD e move (III)Lew$a;
		METHOD e subtract (Lfs;)Lfs;
		METHOD f offset (Lfs;)Lfs;
		METHOD g set (J)Lew$a;
		METHOD g set (Lfs;)Lew$a;
		METHOD h immutable ()Lew;
		METHOD h east (I)Lfs;
		METHOD h move (Lfs;)Lew$a;
		METHOD i east ()Lfs;
		METHOD i west (I)Lfs;
		METHOD j west ()Lfs;
		METHOD j south (I)Lfs;
		METHOD k south ()Lfs;
		METHOD k north (I)Lfs;
		METHOD l north ()Lfs;
		METHOD l below (I)Lfs;
		METHOD m below ()Lfs;
		METHOD m above (I)Lfs;
		METHOD n above ()Lfs;
		METHOD n multiply (I)Lfs;
		METHOD o getX ()I
		METHOD o setX (I)V
		METHOD p getY ()I
		METHOD p setY (I)V
		METHOD q getZ ()I
		METHOD q setZ (I)V
	CLASS b PooledMutableBlockPos
		FIELD f free Z
		FIELD g POOL Ljava/util/List;
		METHOD <clinit> <clinit> ()V
		METHOD <init> <init> (III)V
		METHOD a set (Laio;)Lew$a;
		METHOD b acquire (Laio;)Lew$b;
		METHOD c set (DDD)Lew$a;
		METHOD c set (Laio;)Lew$b;
		METHOD c move (Lfb;)Lew$a;
		METHOD c move (Lfb;I)Lew$a;
		METHOD close close ()V
		METHOD d acquire (DDD)Lew$b;
		METHOD d set (III)Lew$a;
		METHOD d move (Lfb;)Lew$b;
		METHOD d move (Lfb;I)Lew$b;
		METHOD e set (DDD)Lew$b;
		METHOD e move (III)Lew$a;
		METHOD f acquire (III)Lew$b;
		METHOD g set (III)Lew$b;
		METHOD g set (Lfs;)Lew$a;
		METHOD h move (III)Lew$b;
		METHOD h move (Lfs;)Lew$a;
		METHOD i acquire (Lfs;)Lew$b;
		METHOD j set (Lfs;)Lew$b;
		METHOD k move (Lfs;)Lew$b;
		METHOD r acquire ()Lew$b;
	FIELD a ZERO Lew;
	FIELD b LOGGER Lorg/apache/logging/log4j/Logger;
	FIELD c PACKED_X_LENGTH I
	FIELD d PACKED_Z_LENGTH I
	FIELD f PACKED_Y_LENGTH I
	FIELD g PACKED_X_MASK J
	FIELD h PACKED_Y_MASK J
	FIELD i PACKED_Z_MASK J
	FIELD j Z_OFFSET I
	FIELD k X_OFFSET I
	METHOD <clinit> <clinit> ()V
	METHOD <init> <init> (DDD)V
	METHOD <init> <init> (III)V
	METHOD <init> <init> (Laio;)V
	METHOD <init> <init> (Lcsi;)V
	METHOD <init> <init> (Lfl;)V
	METHOD <init> <init> (Lfs;)V
	METHOD a asLong ()J
	METHOD a offset (DDD)Lew;
	METHOD a multiply (I)Lew;
	METHOD a asLong (III)J
	METHOD a betweenClosedStream (IIIIII)Ljava/util/stream/Stream;
	METHOD a isOutsideBuildHeight (J)Z
	METHOD a offset (JIII)J
	METHOD a offset (JLfb;)J
	METHOD a rotate (Lbrg;)Lew;
	METHOD a deserialize (Lcom/mojang/datafixers/Dynamic;)Lew;
	METHOD a serialize (Lcom/mojang/datafixers/types/DynamicOps;)Ljava/lang/Object;
	METHOD a betweenClosed (Lew;Lew;)Ljava/lang/Iterable;
	METHOD a relative (Lfb$a;I)Lew;
	METHOD a relative (Lfb;)Lew;
	METHOD a relative (Lfb;I)Lew;
	METHOD a offset (Lfs;)Lew;
	METHOD a lambda$deserialize$2 ([II)V
	METHOD b above ()Lew;
	METHOD b offset (DDD)Lfs;
	METHOD b above (I)Lew;
	METHOD b offset (III)Lew;
	METHOD b betweenClosed (IIIIII)Ljava/lang/Iterable;
	METHOD b getX (J)I
	METHOD b betweenClosedStream (Lew;Lew;)Ljava/util/stream/Stream;
	METHOD b relative (Lfb$a;I)Lfs;
	METHOD b relative (Lfb;)Lfs;
	METHOD b relative (Lfb;I)Lfs;
	METHOD b subtract (Lfs;)Lew;
	METHOD b lambda$deserialize$1 ([II)V
	METHOD c below ()Lew;
	METHOD c below (I)Lew;
	METHOD c offset (III)Lfs;
	METHOD c lambda$betweenClosed$3 (IIIIII)Ljava/util/Iterator;
	METHOD c getY (J)I
	METHOD c cross (Lfs;)Lew;
	METHOD c lambda$deserialize$0 ([II)V
	METHOD d north ()Lew;
	METHOD d north (I)Lew;
	METHOD d getZ (J)I
	METHOD d cross (Lfs;)Lfs;
	METHOD e south ()Lew;
	METHOD e south (I)Lew;
	METHOD e of (J)Lew;
	METHOD e subtract (Lfs;)Lfs;
	METHOD f west ()Lew;
	METHOD f west (I)Lew;
	METHOD f getFlatIndex (J)J
	METHOD f offset (Lfs;)Lfs;
	METHOD g east ()Lew;
	METHOD g east (I)Lew;
	METHOD h immutable ()Lew;
	METHOD h east (I)Lfs;
	METHOD i east ()Lfs;
	METHOD i west (I)Lfs;
	METHOD j west ()Lfs;
	METHOD j south (I)Lfs;
	METHOD k south ()Lfs;
	METHOD k north (I)Lfs;
	METHOD l north ()Lfs;
	METHOD l below (I)Lfs;
	METHOD m below ()Lfs;
	METHOD m above (I)Lfs;
	METHOD n above ()Lfs;
	METHOD n multiply (I)Lfs;
