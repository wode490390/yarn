CLASS gb net/minecraft/core/BlockPos
	FIELD a CODEC Lcom/mojang/serialization/Codec;
	FIELD b ZERO Lgb;
	FIELD c PACKED_Y_LENGTH I
	FIELD d LOGGER Lorg/apache/logging/log4j/Logger;
	FIELD g PACKED_X_LENGTH I
	FIELD h PACKED_Z_LENGTH I
	FIELD i PACKED_X_MASK J
	FIELD j PACKED_Y_MASK J
	FIELD k PACKED_Z_MASK J
	FIELD l Y_OFFSET I
	FIELD m Z_OFFSET I
	FIELD n X_OFFSET I
	METHOD <clinit> <clinit> ()V
	METHOD <init> <init> (DDD)V
	METHOD <init> <init> (III)V
	METHOD <init> <init> (Ldly;)V
	METHOD <init> <init> (Lgo;)V
	METHOD <init> <init> (Lgw;)V
	METHOD a asLong ()J
	METHOD a offset (DDD)Lgb;
	METHOD a multiply (I)Lgb;
	METHOD a asLong (III)J
	METHOD a betweenClosedStream (IIIIII)Ljava/util/stream/Stream;
	METHOD a lambda$withinManhattan$4 (IIIIIII)Ljava/util/Iterator;
	METHOD a lambda$randomBetweenClosed$3 (IILjava/util/Random;IIIII)Ljava/util/Iterator;
	METHOD a getX (J)I
	METHOD a offset (JIII)J
	METHOD a offset (JLgg;)J
	METHOD a rotate (Lcek;)Lgb;
	METHOD a betweenClosedStream (Lczp;)Ljava/util/stream/Stream;
	METHOD a betweenClosedStream (Ldlt;)Ljava/util/stream/Stream;
	METHOD a lambda$static$2 (Lgb;)Ljava/util/stream/IntStream;
	METHOD a withinManhattan (Lgb;III)Ljava/lang/Iterable;
	METHOD a findClosestMatch (Lgb;IILjava/util/function/Predicate;)Ljava/util/Optional;
	METHOD a spiralAround (Lgb;ILgg;Lgg;)Ljava/lang/Iterable;
	METHOD a betweenClosed (Lgb;Lgb;)Ljava/lang/Iterable;
	METHOD a relative (Lgg$a;I)Lgb;
	METHOD a relative (Lgg;)Lgb;
	METHOD a relative (Lgg;I)Lgb;
	METHOD a lambda$spiralAround$6 (Lgg;Lgg;Lgb;I)Ljava/util/Iterator;
	METHOD a offset (Lgw;)Lgb;
	METHOD a randomBetweenClosed (Ljava/util/Random;IIIIIII)Ljava/lang/Iterable;
	METHOD a randomInCube (Ljava/util/Random;ILgb;I)Ljava/lang/Iterable;
	METHOD a lambda$static$1 (Ljava/util/stream/IntStream;)Lcom/mojang/serialization/DataResult;
	METHOD a lambda$null$0 ([I)Lgb;
	METHOD b above ()Lgb;
	METHOD b offset (DDD)Lgw;
	METHOD b above (I)Lgb;
	METHOD b offset (III)Lgb;
	METHOD b betweenClosed (IIIIII)Ljava/lang/Iterable;
	METHOD b getY (J)I
	METHOD b withinManhattanStream (Lgb;III)Ljava/util/stream/Stream;
	METHOD b betweenClosedStream (Lgb;Lgb;)Ljava/util/stream/Stream;
	METHOD b relative (Lgg$a;I)Lgw;
	METHOD b relative (Lgg;)Lgw;
	METHOD b relative (Lgg;I)Lgw;
	METHOD b subtract (Lgw;)Lgb;
	METHOD c below ()Lgb;
	METHOD c below (I)Lgb;
	METHOD c offset (III)Lgw;
	METHOD c lambda$betweenClosed$5 (IIIIII)Ljava/util/Iterator;
	METHOD c getZ (J)I
	METHOD c cross (Lgw;)Lgb;
	METHOD d north ()Lgb;
	METHOD d north (I)Lgb;
	METHOD d of (J)Lgb;
	METHOD d cross (Lgw;)Lgw;
	METHOD e south ()Lgb;
	METHOD e south (I)Lgb;
	METHOD e getFlatIndex (J)J
	METHOD e subtract (Lgw;)Lgw;
	METHOD f west ()Lgb;
	METHOD f west (I)Lgb;
	METHOD f offset (Lgw;)Lgw;
	METHOD g east ()Lgb;
	METHOD g east (I)Lgb;
	METHOD h immutable ()Lgb;
	METHOD h atY (I)Lgb;
	METHOD i mutable ()Lgb$a;
	METHOD i east (I)Lgw;
	METHOD j east ()Lgw;
	METHOD j west (I)Lgw;
	METHOD k west ()Lgw;
	METHOD k south (I)Lgw;
	METHOD l south ()Lgw;
	METHOD l north (I)Lgw;
	METHOD m north ()Lgw;
	METHOD m below (I)Lgw;
	METHOD n below ()Lgw;
	METHOD n above (I)Lgw;
	METHOD o above ()Lgw;
	METHOD o multiply (I)Lgw;
	CLASS 1 1
		FIELD a nextPos Lgb$a;
		FIELD b counter I
		FIELD c val$limit I
		FIELD d val$minX I
		FIELD e val$random Ljava/util/Random;
		FIELD f val$width I
		FIELD g val$minY I
		FIELD h val$height I
		FIELD i val$minZ I
		FIELD j val$depth I
		METHOD <init> <init> (IILjava/util/Random;IIIII)V
		METHOD a computeNext ()Lgb;
		METHOD computeNext computeNext ()Ljava/lang/Object;
	CLASS 2 2
		FIELD a val$originZ I
		FIELD b val$maxDepth I
		FIELD c val$reachX I
		FIELD d val$reachY I
		FIELD e val$reachZ I
		FIELD f val$originX I
		FIELD g val$originY I
		FIELD h cursor Lgb$a;
		FIELD i currentDepth I
		FIELD j maxX I
		FIELD k maxY I
		FIELD l x I
		FIELD m y I
		FIELD n zMirror Z
		METHOD <init> <init> (IIIIIII)V
		METHOD a computeNext ()Lgb;
		METHOD computeNext computeNext ()Ljava/lang/Object;
	CLASS 3 3
		FIELD a val$end I
		FIELD b val$width I
		FIELD c val$height I
		FIELD d val$minX I
		FIELD e val$minY I
		FIELD f val$minZ I
		FIELD g cursor Lgb$a;
		FIELD h index I
		METHOD <init> <init> (IIIIII)V
		METHOD a computeNext ()Lgb;
		METHOD computeNext computeNext ()Ljava/lang/Object;
	CLASS 4 4
		FIELD a val$firstDirection Lgg;
		FIELD b val$secondDirection Lgg;
		FIELD c val$center Lgb;
		FIELD d val$radius I
		FIELD e directions [Lgg;
		FIELD f cursor Lgb$a;
		FIELD g legs I
		FIELD h leg I
		FIELD i legSize I
		FIELD j legIndex I
		FIELD k lastX I
		FIELD l lastY I
		FIELD m lastZ I
		METHOD <init> <init> (Lgg;Lgg;Lgb;I)V
		METHOD a computeNext ()Lgb$a;
		METHOD computeNext computeNext ()Ljava/lang/Object;
	CLASS 5 5
		FIELD a $SwitchMap$net$minecraft$world$level$block$Rotation [I
		FIELD b $SwitchMap$net$minecraft$core$Direction$Axis [I
		METHOD <clinit> <clinit> ()V
	CLASS a MutableBlockPos
		METHOD <init> <init> ()V
		METHOD <init> <init> (DDD)V
		METHOD <init> <init> (III)V
		METHOD a offset (DDD)Lgb;
		METHOD a multiply (I)Lgb;
		METHOD a rotate (Lcek;)Lgb;
		METHOD a set (Lfz;III)Lgb$a;
		METHOD a relative (Lgg$a;I)Lgb;
		METHOD a clamp (Lgg$a;II)Lgb$a;
		METHOD a relative (Lgg;I)Lgb;
		METHOD a setWithOffset (Lgw;III)Lgb$a;
		METHOD a setWithOffset (Lgw;Lgg;)Lgb$a;
		METHOD a setWithOffset (Lgw;Lgw;)Lgb$a;
		METHOD b offset (DDD)Lgw;
		METHOD b offset (III)Lgb;
		METHOD b relative (Lgg$a;I)Lgw;
		METHOD b relative (Lgg;)Lgw;
		METHOD b relative (Lgg;I)Lgw;
		METHOD c set (DDD)Lgb$a;
		METHOD c offset (III)Lgw;
		METHOD c move (Lgg;)Lgb$a;
		METHOD c move (Lgg;I)Lgb$a;
		METHOD d set (III)Lgb$a;
		METHOD d cross (Lgw;)Lgw;
		METHOD e move (III)Lgb$a;
		METHOD e subtract (Lgw;)Lgw;
		METHOD f set (J)Lgb$a;
		METHOD f offset (Lgw;)Lgw;
		METHOD g set (Lgw;)Lgb$a;
		METHOD h immutable ()Lgb;
		METHOD h move (Lgw;)Lgb$a;
		METHOD i east (I)Lgw;
		METHOD j east ()Lgw;
		METHOD j west (I)Lgw;
		METHOD k west ()Lgw;
		METHOD k south (I)Lgw;
		METHOD l south ()Lgw;
		METHOD l north (I)Lgw;
		METHOD m north ()Lgw;
		METHOD m below (I)Lgw;
		METHOD n below ()Lgw;
		METHOD n above (I)Lgw;
		METHOD o above ()Lgw;
		METHOD o multiply (I)Lgw;
		METHOD p setX (I)Lgb$a;
		METHOD q setY (I)Lgb$a;
		METHOD r setZ (I)Lgb$a;
		METHOD s setZ (I)Lgw;
		METHOD t setY (I)Lgw;
		METHOD u setX (I)Lgw;
