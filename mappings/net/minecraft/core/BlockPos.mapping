CLASS fk net/minecraft/core/BlockPos
	FIELD a ZERO Lfk;
	FIELD b LOGGER Lorg/apache/logging/log4j/Logger;
	FIELD c PACKED_X_LENGTH I
	FIELD d PACKED_Z_LENGTH I
	FIELD f PACKED_Y_LENGTH I
	FIELD g PACKED_X_MASK J
	FIELD h PACKED_Y_MASK J
	FIELD i PACKED_Z_MASK J
	FIELD j Z_OFFSET I
	FIELD k X_OFFSET I
	METHOD <clinit> <clinit> ()V
	METHOD <init> <init> (DDD)V
	METHOD <init> <init> (III)V
	METHOD <init> <init> (Laky;)V
	METHOD <init> <init> (Lcwu;)V
	METHOD <init> <init> (Lfz;)V
	METHOD <init> <init> (Lgg;)V
	METHOD a asLong ()J
	METHOD a offset (DDD)Lfk;
	METHOD a multiply (I)Lfk;
	METHOD a asLong (III)J
	METHOD a betweenClosedStream (IIIIII)Ljava/util/stream/Stream;
	METHOD a isOutsideBuildHeight (J)Z
	METHOD a offset (JIII)J
	METHOD a offset (JLfp;)J
	METHOD a rotate (Lbup;)Lfk;
	METHOD a betweenClosedStream (Lcmg;)Ljava/util/stream/Stream;
	METHOD a deserialize (Lcom/mojang/datafixers/Dynamic;)Lfk;
	METHOD a serialize (Lcom/mojang/datafixers/types/DynamicOps;)Ljava/lang/Object;
	METHOD a betweenClosed (Lfk;Lfk;)Ljava/lang/Iterable;
	METHOD a relative (Lfp$a;I)Lfk;
	METHOD a relative (Lfp;)Lfk;
	METHOD a relative (Lfp;I)Lfk;
	METHOD a offset (Lgg;)Lfk;
	METHOD a lambda$deserialize$2 ([II)V
	METHOD b above ()Lfk;
	METHOD b offset (DDD)Lgg;
	METHOD b above (I)Lfk;
	METHOD b offset (III)Lfk;
	METHOD b betweenClosed (IIIIII)Ljava/lang/Iterable;
	METHOD b getX (J)I
	METHOD b betweenClosedStream (Lfk;Lfk;)Ljava/util/stream/Stream;
	METHOD b relative (Lfp$a;I)Lgg;
	METHOD b relative (Lfp;)Lgg;
	METHOD b relative (Lfp;I)Lgg;
	METHOD b subtract (Lgg;)Lfk;
	METHOD b lambda$deserialize$1 ([II)V
	METHOD c below ()Lfk;
	METHOD c below (I)Lfk;
	METHOD c offset (III)Lgg;
	METHOD c lambda$betweenClosed$3 (IIIIII)Ljava/util/Iterator;
	METHOD c getY (J)I
	METHOD c cross (Lgg;)Lfk;
	METHOD c lambda$deserialize$0 ([II)V
	METHOD d north ()Lfk;
	METHOD d north (I)Lfk;
	METHOD d getZ (J)I
	METHOD d cross (Lgg;)Lgg;
	METHOD e south ()Lfk;
	METHOD e south (I)Lfk;
	METHOD e of (J)Lfk;
	METHOD e subtract (Lgg;)Lgg;
	METHOD f west ()Lfk;
	METHOD f west (I)Lfk;
	METHOD f getFlatIndex (J)J
	METHOD f offset (Lgg;)Lgg;
	METHOD g east ()Lfk;
	METHOD g east (I)Lfk;
	METHOD h immutable ()Lfk;
	METHOD h east (I)Lgg;
	METHOD i east ()Lgg;
	METHOD i west (I)Lgg;
	METHOD j west ()Lgg;
	METHOD j south (I)Lgg;
	METHOD k south ()Lgg;
	METHOD k north (I)Lgg;
	METHOD l north ()Lgg;
	METHOD l below (I)Lgg;
	METHOD m below ()Lgg;
	METHOD m above (I)Lgg;
	METHOD n above ()Lgg;
	METHOD n multiply (I)Lgg;
	CLASS 1 1
		FIELD a cursor Lfn;
		FIELD b nextPos Lfk$a;
		FIELD c val$minX I
		FIELD d val$minY I
		FIELD e val$minZ I
		FIELD f val$maxX I
		FIELD g val$maxY I
		FIELD h val$maxZ I
		METHOD <init> <init> (JIIIIIII)V
		METHOD tryAdvance tryAdvance (Ljava/util/function/Consumer;)Z
	CLASS 2 2
		FIELD a cursor Lfn;
		FIELD b nextPos Lfk$a;
		FIELD c val$minX I
		FIELD d val$minY I
		FIELD e val$minZ I
		FIELD f val$maxX I
		FIELD g val$maxY I
		FIELD h val$maxZ I
		METHOD <init> <init> (IIIIII)V
		METHOD a computeNext ()Lfk;
		METHOD computeNext computeNext ()Ljava/lang/Object;
	CLASS 3 3
		FIELD a $SwitchMap$net$minecraft$world$level$block$Rotation [I
		METHOD <clinit> <clinit> ()V
	CLASS a MutableBlockPos
		FIELD b x I
		FIELD c y I
		FIELD d z I
		METHOD <init> <init> ()V
		METHOD <init> <init> (DDD)V
		METHOD <init> <init> (III)V
		METHOD <init> <init> (Laky;)V
		METHOD <init> <init> (Lfk;)V
		METHOD a offset (DDD)Lfk;
		METHOD a multiply (I)Lfk;
		METHOD a set (Laky;)Lfk$a;
		METHOD a rotate (Lbup;)Lfk;
		METHOD a set (Lfi;III)Lfk$a;
		METHOD a relative (Lfp$a;I)Lfk;
		METHOD a relative (Lfp;I)Lfk;
		METHOD b offset (DDD)Lgg;
		METHOD b offset (III)Lfk;
		METHOD b relative (Lfp$a;I)Lgg;
		METHOD b relative (Lfp;)Lgg;
		METHOD b relative (Lfp;I)Lgg;
		METHOD c set (DDD)Lfk$a;
		METHOD c offset (III)Lgg;
		METHOD c move (Lfp;)Lfk$a;
		METHOD c move (Lfp;I)Lfk$a;
		METHOD d set (III)Lfk$a;
		METHOD d cross (Lgg;)Lgg;
		METHOD e move (III)Lfk$a;
		METHOD e subtract (Lgg;)Lgg;
		METHOD f offset (Lgg;)Lgg;
		METHOD g set (J)Lfk$a;
		METHOD g set (Lgg;)Lfk$a;
		METHOD h immutable ()Lfk;
		METHOD h east (I)Lgg;
		METHOD h move (Lgg;)Lfk$a;
		METHOD i east ()Lgg;
		METHOD i west (I)Lgg;
		METHOD j west ()Lgg;
		METHOD j south (I)Lgg;
		METHOD k south ()Lgg;
		METHOD k north (I)Lgg;
		METHOD l north ()Lgg;
		METHOD l below (I)Lgg;
		METHOD m below ()Lgg;
		METHOD m above (I)Lgg;
		METHOD n above ()Lgg;
		METHOD n multiply (I)Lgg;
		METHOD o getX ()I
		METHOD o setX (I)V
		METHOD p getY ()I
		METHOD p setY (I)V
		METHOD q getZ ()I
		METHOD q setZ (I)V
	CLASS b PooledMutableBlockPos
		FIELD f free Z
		FIELD g POOL Ljava/util/List;
		METHOD <clinit> <clinit> ()V
		METHOD <init> <init> (III)V
		METHOD a set (Laky;)Lfk$a;
		METHOD b acquire (Laky;)Lfk$b;
		METHOD c set (DDD)Lfk$a;
		METHOD c set (Laky;)Lfk$b;
		METHOD c move (Lfp;)Lfk$a;
		METHOD c move (Lfp;I)Lfk$a;
		METHOD close close ()V
		METHOD d acquire (DDD)Lfk$b;
		METHOD d set (III)Lfk$a;
		METHOD d move (Lfp;)Lfk$b;
		METHOD d move (Lfp;I)Lfk$b;
		METHOD e set (DDD)Lfk$b;
		METHOD e move (III)Lfk$a;
		METHOD f acquire (III)Lfk$b;
		METHOD g set (III)Lfk$b;
		METHOD g set (Lgg;)Lfk$a;
		METHOD h move (III)Lfk$b;
		METHOD h move (Lgg;)Lfk$a;
		METHOD i acquire (Lgg;)Lfk$b;
		METHOD j set (Lgg;)Lfk$b;
		METHOD k move (Lgg;)Lfk$b;
		METHOD r acquire ()Lfk$b;
