CLASS bda net/minecraft/world/entity/animal/Bee
	FIELD bV FLAP_DEGREES_PER_TICK F
	FIELD bW TICKS_PER_FLAP I
	FIELD bY TAG_CROPS_GROWN_SINCE_POLLINATION Ljava/lang/String;
	FIELD bZ TAG_CANNOT_ENTER_HIVE_TICKS Ljava/lang/String;
	FIELD cA ticksWithoutNectarSinceExitingHive I
	FIELD cB stayOutOfHiveCountdown I
	FIELD cC numCropsGrownSincePollination I
	FIELD cD COOLDOWN_BEFORE_LOCATING_NEW_HIVE I
	FIELD cE remainingCooldownBeforeLocatingNewHive I
	FIELD cF COOLDOWN_BEFORE_LOCATING_NEW_FLOWER I
	FIELD cG remainingCooldownBeforeLocatingNewFlower I
	FIELD cH savedFlowerPos Lgb;
	FIELD cI hivePos Lgb;
	FIELD cJ beePollinateGoal Lbda$k;
	FIELD cK goToHiveGoal Lbda$e;
	FIELD cL goToKnownFlowerGoal Lbda$f;
	FIELD cM underWaterTicks I
	FIELD ca TAG_TICKS_SINCE_POLLINATION Ljava/lang/String;
	FIELD cb TAG_HAS_STUNG Ljava/lang/String;
	FIELD cc TAG_HAS_NECTAR Ljava/lang/String;
	FIELD cd TAG_FLOWER_POS Ljava/lang/String;
	FIELD ce TAG_HIVE_POS Ljava/lang/String;
	FIELD cf DATA_FLAGS_ID Lvy;
	FIELD cg DATA_REMAINING_ANGER_TIME Lvy;
	FIELD ch FLAG_ROLL I
	FIELD ci FLAG_HAS_STUNG I
	FIELD cj FLAG_HAS_NECTAR I
	FIELD ck STING_DEATH_COUNTDOWN I
	FIELD cl TICKS_BEFORE_GOING_TO_KNOWN_FLOWER I
	FIELD cm TICKS_WITHOUT_NECTAR_BEFORE_GOING_HOME I
	FIELD cn MIN_ATTACK_DIST I
	FIELD co MAX_CROPS_GROWABLE I
	FIELD cp POISON_SECONDS_NORMAL I
	FIELD cq POISON_SECONDS_HARD I
	FIELD cr TOO_FAR_DISTANCE I
	FIELD cs HIVE_CLOSE_ENOUGH_DISTANCE I
	FIELD ct PATHFIND_TO_HIVE_WHEN_CLOSER_THAN I
	FIELD cu HIVE_SEARCH_DISTANCE I
	FIELD cv PERSISTENT_ANGER_TIME Laqs;
	FIELD cw persistentAngerTarget Ljava/util/UUID;
	FIELD cx rollAmount F
	FIELD cy rollAmountO F
	FIELD cz timeSinceSting I
	METHOD <clinit> <clinit> ()V
	METHOD <init> <init> (Lasp;Lbvr;)V
	METHOD A access$4000 (Lbda;)Ljava/util/Random;
	METHOD B doHurtTarget (Lasl;)Z
	METHOD B access$4100 (Lbda;)Ljava/util/Random;
	METHOD C access$4300 (Lbda;)Lbbb;
	METHOD D access$4400 (Lbda;)Ljava/util/Random;
	METHOD E access$4500 (Lbda;)Lbbb;
	METHOD F access$4600 (Lbda;)Ljava/util/Random;
	METHOD G access$4700 (Lbda;)Ljava/util/Random;
	METHOD H access$3000 (Lbda;)I
	METHOD H_ getRemainingPersistentAngerTime ()I
	METHOD I access$4800 (Lbda;)Lbda$e;
	METHOD I_ getPersistentAngerTarget ()Ljava/util/UUID;
	METHOD J access$5200 (Lbda;)I
	METHOD J_ startPersistentAngerTimer ()V
	METHOD K access$5300 (Lbda;)Ljava/util/Random;
	METHOD L access$5400 (Lbda;)Ljava/util/Random;
	METHOD M access$5500 (Lbda;)V
	METHOD Q sendDebugPackets ()V
	METHOD a checkFallDamage (DZLcjr;Lgb;)V
	METHOD a causeFallDamage (FFLarv;)Z
	METHOD a getBreedOffspring (Labj;Lasj;)Lasj;
	METHOD a hurt (Larv;F)Z
	METHOD a access$700 (Lbda;)Lbda$k;
	METHOD a access$3002 (Lbda;I)I
	METHOD a access$2400 (Lbda;Lgb;)Z
	METHOD a access$1600 (Lbda;Lgb;I)Z
	METHOD a access$4200 (Lbda;Z)V
	METHOD a createNavigation (Lbvr;)Lbbb;
	METHOD a spawnFluidParticle (Lbvr;DDDDDLho;)V
	METHOD a getWalkTargetValue (Lgb;Lbvu;)F
	METHOD a setPersistentAngerTarget (Ljava/util/UUID;)V
	METHOD a readAdditionalSaveData (Lmv;)V
	METHOD aB isFlapping ()Z
	METHOD a_ setRemainingPersistentAngerTime (I)V
	METHOD b getBreedOffspring (Labj;Lasj;)Lbda;
	METHOD b getStandingEyeHeight (Latj;Lasm;)F
	METHOD b access$900 (Lbda;)Lbbb;
	METHOD b access$3802 (Lbda;I)I
	METHOD b access$2500 (Lbda;Lgb;)V
	METHOD b closerThan (Lgb;I)Z
	METHOD b playStepSound (Lgb;Lcjr;)V
	METHOD b addAdditionalSaveData (Lmv;)V
	METHOD c jumpInLiquid (Lafs;)V
	METHOD c getHurtSound (Larv;)Laev;
	METHOD c access$1000 (Lbda;)Ljava/util/Random;
	METHOD c access$1502 (Lbda;Lgb;)Lgb;
	METHOD cp getLeashOffset ()Ldly;
	METHOD d setFlag (IZ)V
	METHOD d access$1100 (Lbda;)Lbbb;
	METHOD d access$3300 (Lbda;Lgb;)Z
	METHOD e defineSynchedData ()V
	METHOD e access$1200 (Lbda;)Lbbb;
	METHOD e access$3202 (Lbda;Lgb;)Lgb;
	METHOD eP customServerAiStep ()V
	METHOD ec getMobType ()Latc;
	METHOD eg getSoundVolume ()F
	METHOD f access$1300 (Lbda;)Lbbb;
	METHOD f access$5100 (Lbda;Lgb;)Z
	METHOD fA createAttributes ()Latx$a;
	METHOD fB isFlying ()Z
	METHOD fC dropOffNectar ()V
	METHOD fD isTiredOfLookingForNectar ()Z
	METHOD fE wantsToEnterHive ()Z
	METHOD fF updateRollAmount ()V
	METHOD fG isHiveNearFire ()Z
	METHOD fH getCropsGrownSincePollination ()I
	METHOD fI resetNumCropsGrownSincePollination ()V
	METHOD fJ incrementNumCropsGrownSincePollination ()V
	METHOD fK isHiveValid ()Z
	METHOD fL isRolling ()Z
	METHOD fn getTravellingTicks ()I
	METHOD fo getBlacklistedHives ()Ljava/util/List;
	METHOD fp resetTicksWithoutNectarSinceExitingHive ()V
	METHOD fv hasHive ()Z
	METHOD fw getHivePos ()Lgb;
	METHOD fx getGoalSelector ()Layr;
	METHOD fy hasNectar ()Z
	METHOD fz hasStung ()Z
	METHOD g access$1400 (Lbda;)Z
	METHOD g setSavedFlowerPos (Lgb;)V
	METHOD h access$1500 (Lbda;)Lgb;
	METHOD h pathfindRandomlyTowards (Lgb;)V
	METHOD i access$1800 (Lbda;)Z
	METHOD i doesHiveHaveSpace (Lgb;)Z
	METHOD j tick ()V
	METHOD j access$1900 (Lbda;)Lbbb;
	METHOD j isTooFarAway (Lgb;)Z
	METHOD k aiStep ()V
	METHOD k access$2000 (Lbda;)Lbbb;
	METHOD k isFlowerValid (Lgb;)Z
	METHOD l access$2100 (Lbda;)Lbbb;
	METHOD l isFood (Lbpr;)Z
	METHOD m access$2200 (Lbda;)Lbbb;
	METHOD n access$2300 (Lbda;)Lbbb;
	METHOD o getSavedFlowerPos ()Lgb;
	METHOD o access$2600 (Lbda;)Lbbb;
	METHOD p getAmbientSound ()Laev;
	METHOD p access$2700 (Lbda;)Lbbb;
	METHOD q getDeathSound ()Laev;
	METHOD q access$2800 (Lbda;)Lbbb;
	METHOD r access$2900 (Lbda;)Lbbb;
	METHOD s hasSavedFlowerPos ()Z
	METHOD s access$3100 (Lbda;)Lbbb;
	METHOD t access$3200 (Lbda;)Lgb;
	METHOD u registerGoals ()V
	METHOD u setStayOutOfHiveCountdown (I)V
	METHOD u access$3400 (Lbda;)Lbbb;
	METHOD v getFlag (I)Z
	METHOD v access$3500 (Lbda;)Lbbb;
	METHOD v setHasNectar (Z)V
	METHOD w access$3600 (Lbda;)Lbbb;
	METHOD w setHasStung (Z)V
	METHOD x getRollAmount (F)F
	METHOD x access$3700 (Lbda;)I
	METHOD x setRolling (Z)V
	METHOD y access$3800 (Lbda;)I
	METHOD z access$3900 (Lbda;)Lbbb;
	CLASS 1 1
		FIELD p this$0 Lbda;
		METHOD <init> <init> (Lbda;Lasz;Lbvr;)V
		METHOD a isStableDestination (Lgb;)Z
		METHOD c tick ()V
	CLASS a BaseBeeGoal
		FIELD a this$0 Lbda;
		METHOD <init> <init> (Lbda;)V
		METHOD <init> <init> (Lbda;Lbda$1;)V
		METHOD a canUse ()Z
		METHOD b canContinueToUse ()Z
		METHOD g canBeeUse ()Z
		METHOD h canBeeContinueToUse ()Z
	CLASS b BeeAttackGoal
		FIELD b this$0 Lbda;
		METHOD <init> <init> (Lbda;Latg;DZ)V
		METHOD a canUse ()Z
		METHOD b canContinueToUse ()Z
	CLASS c BeeBecomeAngryTargetGoal
		METHOD <init> <init> (Lbda;)V
		METHOD a canUse ()Z
		METHOD b canContinueToUse ()Z
		METHOD h beeCanTarget ()Z
	CLASS d BeeEnterHiveGoal
		FIELD b this$0 Lbda;
		METHOD <init> <init> (Lbda;)V
		METHOD <init> <init> (Lbda;Lbda$1;)V
		METHOD c start ()V
		METHOD g canBeeUse ()Z
		METHOD h canBeeContinueToUse ()Z
	CLASS e BeeGoToHiveGoal
		FIELD b MAX_TRAVELLING_TICKS I
		FIELD c this$0 Lbda;
		FIELD d travellingTicks I
		FIELD e MAX_BLACKLISTED_TARGETS I
		FIELD f blacklistedTargets Ljava/util/List;
		FIELD g lastPath Ldfy;
		FIELD h TICKS_BEFORE_HIVE_DROP I
		FIELD i ticksStuck I
		METHOD <init> <init> (Lbda;)V
		METHOD a canUse ()Z
		METHOD a access$300 (Lbda$e;)I
		METHOD a access$4900 (Lbda$e;Lgb;)Z
		METHOD a pathfindDirectlyTowards (Lgb;)Z
		METHOD b canContinueToUse ()Z
		METHOD b access$500 (Lbda$e;)Ljava/util/List;
		METHOD b isTargetBlacklisted (Lgb;)Z
		METHOD c start ()V
		METHOD c access$5000 (Lbda$e;)V
		METHOD c blacklistTarget (Lgb;)V
		METHOD d stop ()V
		METHOD d hasReachedTarget (Lgb;)Z
		METHOD e tick ()V
		METHOD g canBeeUse ()Z
		METHOD h canBeeContinueToUse ()Z
		METHOD j clearBlacklist ()V
		METHOD k dropAndBlacklistHive ()V
		METHOD l dropHive ()V
	CLASS f BeeGoToKnownFlowerGoal
		FIELD b this$0 Lbda;
		FIELD c MAX_TRAVELLING_TICKS I
		FIELD d travellingTicks I
		METHOD <init> <init> (Lbda;)V
		METHOD a canUse ()Z
		METHOD a access$400 (Lbda$f;)I
		METHOD b canContinueToUse ()Z
		METHOD c start ()V
		METHOD d stop ()V
		METHOD e tick ()V
		METHOD g canBeeUse ()Z
		METHOD h canBeeContinueToUse ()Z
		METHOD j wantsToGoToKnownFlower ()Z
	CLASS g BeeGrowCropGoal
		FIELD b GROW_CHANCE I
		FIELD c this$0 Lbda;
		METHOD <init> <init> (Lbda;)V
		METHOD <init> <init> (Lbda;Lbda$1;)V
		METHOD e tick ()V
		METHOD g canBeeUse ()Z
		METHOD h canBeeContinueToUse ()Z
	CLASS h BeeHurtByOtherGoal
		FIELD a this$0 Lbda;
		METHOD <init> <init> (Lbda;Lbda;)V
		METHOD a alertOther (Lasz;Lasy;)V
		METHOD b canContinueToUse ()Z
	CLASS i BeeLocateHiveGoal
		FIELD b this$0 Lbda;
		METHOD <init> <init> (Lbda;)V
		METHOD <init> <init> (Lbda;Lbda$1;)V
		METHOD a lambda$findNearbyHivesWithSpace$0 (Lbcr;)Z
		METHOD a lambda$findNearbyHivesWithSpace$1 (Lbda;Lgb;)Z
		METHOD a lambda$findNearbyHivesWithSpace$2 (Lgb;Lgb;)D
		METHOD c start ()V
		METHOD g canBeeUse ()Z
		METHOD h canBeeContinueToUse ()Z
		METHOD j findNearbyHivesWithSpace ()Ljava/util/List;
	CLASS j BeeLookControl
		FIELD h this$0 Lbda;
		METHOD <init> <init> (Lbda;Lasz;)V
		METHOD a tick ()V
		METHOD b resetXRotOnTick ()Z
	CLASS k BeePollinateGoal
		FIELD b this$0 Lbda;
		FIELD c MIN_POLLINATION_TICKS I
		FIELD d MIN_FIND_FLOWER_RETRY_COOLDOWN I
		FIELD e MAX_FIND_FLOWER_RETRY_COOLDOWN I
		FIELD f VALID_POLLINATION_BLOCKS Ljava/util/function/Predicate;
		FIELD g ARRIVAL_THRESHOLD D
		FIELD h POSITION_CHANGE_CHANCE I
		FIELD i SPEED_MODIFIER F
		FIELD j HOVER_HEIGHT_WITHIN_FLOWER F
		FIELD k HOVER_POS_OFFSET F
		FIELD l successfulPollinatingTicks I
		FIELD m lastSoundPlayedTick I
		FIELD n pollinating Z
		FIELD o hoverPos Ldly;
		FIELD p pollinatingTicks I
		FIELD q MAX_POLLINATING_TICKS I
		METHOD <init> <init> (Lbda;)V
		METHOD a access$600 (Lbda$k;)Z
		METHOD a lambda$new$0 (Lcjr;)Z
		METHOD a findNearestBlock (Ljava/util/function/Predicate;D)Ljava/util/Optional;
		METHOD b access$800 (Lbda$k;)V
		METHOD c start ()V
		METHOD d stop ()V
		METHOD e tick ()V
		METHOD g canBeeUse ()Z
		METHOD h canBeeContinueToUse ()Z
		METHOD j hasPollinatedLongEnough ()Z
		METHOD k isPollinating ()Z
		METHOD l stopPollinating ()V
		METHOD m setWantedPos ()V
		METHOD n getOffset ()F
		METHOD o findNearbyFlower ()Ljava/util/Optional;
	CLASS l BeeWanderGoal
		FIELD a this$0 Lbda;
		FIELD b WANDER_THRESHOLD I
		METHOD <init> <init> (Lbda;)V
		METHOD a canUse ()Z
		METHOD b canContinueToUse ()Z
		METHOD c start ()V
		METHOD g findPos ()Ldly;
