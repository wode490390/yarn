CLASS bjr net/minecraft/world/entity/projectile/FishingHook
	FIELD aA luck I
	FIELD aB lureSpeed I
	FIELD ar DATA_BITING Lvy;
	FIELD as life I
	FIELD at nibble I
	FIELD au timeUntilLured I
	FIELD av timeUntilHooked I
	FIELD aw fishAngle F
	FIELD ax openWater Z
	FIELD ay hookedIn Lasl;
	FIELD az currentState Lbjr$a;
	FIELD b syncronizedRandom Ljava/util/Random;
	FIELD c biting Z
	FIELD d outOfWaterTime I
	FIELD e MAX_OUT_OF_WATER_TIME I
	FIELD f DATA_HOOKED_ENTITY Lvy;
	METHOD <clinit> <clinit> ()V
	METHOD <init> <init> (Lasp;Lbvr;)V
	METHOD <init> <init> (Lasp;Lbvr;II)V
	METHOD <init> <init> (Lbjf;Lbvr;II)V
	METHOD O getAddEntityPacket ()Lpf;
	METHOD a handleEntityEvent (B)V
	METHOD a shouldRenderAtSqrDistance (D)Z
	METHOD a lerpTo (DDDFFIZ)V
	METHOD a remove (Lasl$c;)V
	METHOD a canHitEntity (Lasl;)Z
	METHOD a shouldStopFishing (Lbjf;)Z
	METHOD a lambda$getOpenWaterTypeForArea$0 (Lbjr$b;Lbjr$b;)Lbjr$b;
	METHOD a onHitBlock (Ldlu;)V
	METHOD a onHitEntity (Ldlv;)V
	METHOD a catchingFish (Lgb;)V
	METHOD a getOpenWaterTypeForArea (Lgb;Lgb;)Lbjr$b;
	METHOD a readAdditionalSaveData (Lmv;)V
	METHOD a recreateFromPacket (Lpj;)V
	METHOD a onSyncedDataUpdated (Lvy;)V
	METHOD aE getMovementEmission ()Lasl$b;
	METHOD b setOwner (Lasl;)V
	METHOD b retrieve (Lbpr;)I
	METHOD b calculateOpenWater (Lgb;)Z
	METHOD b addAdditionalSaveData (Lmv;)V
	METHOD bY canChangeDimensions ()Z
	METHOD c getOpenWaterTypeForBlock (Lgb;)Lbjr$b;
	METHOD e defineSynchedData ()V
	METHOD g isOpenWaterFishing ()Z
	METHOD h bringInHookedEntity ()V
	METHOD i getPlayerOwner ()Lbjf;
	METHOD j tick ()V
	METHOD k getHookedIn ()Lasl;
	METHOD m checkCollision ()V
	METHOD n setHookedEntity ()V
	CLASS 1 1
		FIELD a $SwitchMap$net$minecraft$world$entity$projectile$FishingHook$OpenWaterType [I
		METHOD <clinit> <clinit> ()V
	CLASS a FishHookState
		FIELD a FLYING Lbjr$a;
		FIELD b HOOKED_IN_ENTITY Lbjr$a;
		FIELD c BOBBING Lbjr$a;
		FIELD d $VALUES [Lbjr$a;
		METHOD <clinit> <clinit> ()V
		METHOD <init> <init> (Ljava/lang/String;I)V
		METHOD valueOf valueOf (Ljava/lang/String;)Lbjr$a;
		METHOD values values ()[Lbjr$a;
	CLASS b OpenWaterType
		FIELD a ABOVE_WATER Lbjr$b;
		FIELD b INSIDE_WATER Lbjr$b;
		FIELD c INVALID Lbjr$b;
		FIELD d $VALUES [Lbjr$b;
		METHOD <clinit> <clinit> ()V
		METHOD <init> <init> (Ljava/lang/String;I)V
		METHOD valueOf valueOf (Ljava/lang/String;)Lbjr$b;
		METHOD values values ()[Lbjr$b;
