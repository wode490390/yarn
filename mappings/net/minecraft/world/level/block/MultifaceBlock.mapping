CLASS cda net/minecraft/world/level/block/MultifaceBlock
	FIELD a DIRECTIONS [Lgg;
	FIELD b AABB_OFFSET F
	FIELD c UP_AABB Ldmr;
	FIELD d DOWN_AABB Ldmr;
	FIELD e WEST_AABB Ldmr;
	FIELD f EAST_AABB Ldmr;
	FIELD g NORTH_AABB Ldmr;
	FIELD h SOUTH_AABB Ldmr;
	FIELD i PROPERTY_BY_DIRECTION Ljava/util/Map;
	FIELD j SHAPE_BY_DIRECTION Ljava/util/Map;
	FIELD k shapesCache Lcom/google/common/collect/ImmutableMap;
	FIELD l canRotate Z
	FIELD m canMirrorX Z
	FIELD n canMirrorZ Z
	METHOD <clinit> <clinit> ()V
	METHOD <init> <init> (Lcjq$c;)V
	METHOD a getStateForPlacement (Lbrr;)Lcjr;
	METHOD a canSpreadToFace (Lbuv;Lgb;Lgg;)Z
	METHOD a canAttachTo (Lbuv;Lgg;Lgb;Lcjr;)Z
	METHOD a spreadToFace (Lbvs;Lgb;Lgg;)Z
	METHOD a lambda$spreadFromRandomFaceTowardRandomDirection$3 (Lcjr;Labj;Lgb;Ljava/util/Random;Lgg;)Z
	METHOD a canBeReplaced (Lcjr;Lbrr;)Z
	METHOD a getShape (Lcjr;Lbuv;Lgb;Ldmd;)Ldmr;
	METHOD a getSpreadFromFaceTowardDirection (Lcjr;Lbuv;Lgb;Lgg;Lgg;)Ljava/util/Optional;
	METHOD a lambda$getStateForPlacement$1 (Lcjr;Lbvr;Lgb;Lgg;)Lcjr;
	METHOD a spreadFromFaceTowardDirection (Lcjr;Lbvs;Lgb;Lgg;Lgg;)Z
	METHOD a spreadFromFaceTowardRandomDirection (Lcjr;Lbvs;Lgb;Lgg;Ljava/util/Random;)Z
	METHOD a canSurvive (Lcjr;Lbvu;Lgb;)Z
	METHOD a mirror (Lcjr;Lccy;)Lcjr;
	METHOD a rotate (Lcjr;Lcek;)Lcjr;
	METHOD a removeFace (Lcjr;Lcki;)Lcjr;
	METHOD a hasFace (Lcjr;Lgg;)Z
	METHOD a updateShape (Lcjr;Lgg;Lcjr;Lbvs;Lgb;Lgb;)Lcjr;
	METHOD a mapDirections (Lcjr;Ljava/util/function/Function;)Lcjr;
	METHOD a createBlockStateDefinition (Lcjs$a;)V
	METHOD a getDefaultMultifaceState (Lcjs;)Lcjr;
	METHOD a isFaceSupported (Lgg;)Z
	METHOD a lambda$static$0 (Ljava/util/EnumMap;)V
	METHOD b lambda$canSpread$5 (Lcjr;Lbuv;Lgb;Lgg;Lgg;)Z
	METHOD b lambda$spreadFromFaceTowardRandomDirection$4 (Lcjr;Lbvs;Lgb;Lgg;Lgg;)Z
	METHOD b lambda$hasAnyVacantFace$7 (Lcjr;Lgg;)Z
	METHOD b getFaceProperty (Lgg;)Lcki;
	METHOD c spreadFromRandomFaceTowardRandomDirection (Lcjr;Labj;Lgb;Ljava/util/Random;)Z
	METHOD c getStateForPlacement (Lcjr;Lbuv;Lgb;Lgg;)Lcjr;
	METHOD c lambda$hasAnyFace$6 (Lcjr;Lgg;)Z
	METHOD d canSpread (Lcjr;Lbuv;Lgb;Lgg;)Z
	METHOD d lambda$spreadFromRandomFaceTowardRandomDirection$2 (Lcjr;Lgg;)Z
	METHOD e isWaterloggable ()Z
	METHOD h canSpreadInto (Lcjr;)Z
	METHOD n calculateMultifaceShape (Lcjr;)Ldmr;
	METHOD o hasAnyFace (Lcjr;)Z
	METHOD p hasAnyVacantFace (Lcjr;)Z
