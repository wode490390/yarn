CLASS cfl net/minecraft/world/level/block/StairBlock
	FIELD F TOP_SHAPES [Ldmr;
	FIELD G BOTTOM_SHAPES [Ldmr;
	FIELD H SHAPE_BY_STATE [I
	FIELD I base Lbyq;
	FIELD J baseState Lcjr;
	FIELD a FACING Lckl;
	FIELD b HALF Lckp;
	FIELD c SHAPE Lckp;
	FIELD d WATERLOGGED Lcki;
	FIELD e TOP_AABB Ldmr;
	FIELD f BOTTOM_AABB Ldmr;
	FIELD g OCTET_NNN Ldmr;
	FIELD h OCTET_NNP Ldmr;
	FIELD i OCTET_NPN Ldmr;
	FIELD j OCTET_NPP Ldmr;
	FIELD k OCTET_PNN Ldmr;
	FIELD l OCTET_PNP Ldmr;
	FIELD m OCTET_PPN Ldmr;
	FIELD n OCTET_PPP Ldmr;
	METHOD <clinit> <clinit> ()V
	METHOD <init> <init> (Lcjr;Lcjq$c;)V
	METHOD a makeStairShape (ILdmr;Ldmr;Ldmr;Ldmr;Ldmr;)Ldmr;
	METHOD a getStateForPlacement (Lbrr;)Lcjr;
	METHOD a stepOn (Lbvr;Lgb;Lasl;)V
	METHOD a wasExploded (Lbvr;Lgb;Lbvj;)V
	METHOD a destroy (Lbvs;Lgb;Lcjr;)V
	METHOD a isPathfindable (Lcjr;Lbuv;Lgb;Ldfz;)Z
	METHOD a getShape (Lcjr;Lbuv;Lgb;Ldmd;)Ldmr;
	METHOD a attack (Lcjr;Lbvr;Lgb;Lbjf;)V
	METHOD a use (Lcjr;Lbvr;Lgb;Lbjf;Larf;Ldlu;)Larg;
	METHOD a onRemove (Lcjr;Lbvr;Lgb;Lcjr;Z)V
	METHOD a animateTick (Lcjr;Lbvr;Lgb;Ljava/util/Random;)V
	METHOD a mirror (Lcjr;Lccy;)Lcjr;
	METHOD a rotate (Lcjr;Lcek;)Lcjr;
	METHOD a updateShape (Lcjr;Lgg;Lcjr;Lbvs;Lgb;Lgb;)Lcjr;
	METHOD a createBlockStateDefinition (Lcjs$a;)V
	METHOD a makeShapes (Ldmr;Ldmr;Ldmr;Ldmr;Ldmr;)[Ldmr;
	METHOD a lambda$makeShapes$0 (Ldmr;Ldmr;Ldmr;Ldmr;Ldmr;I)Ldmr;
	METHOD a_ tick (Lcjr;Labj;Lgb;Ljava/util/Random;)V
	METHOD b lambda$makeShapes$1 (I)[Ldmr;
	METHOD b randomTick (Lcjr;Labj;Lgb;Ljava/util/Random;)V
	METHOD b onPlace (Lcjr;Lbvr;Lgb;Lcjr;Z)V
	METHOD c canTakeShape (Lcjr;Lbuv;Lgb;Lgg;)Z
	METHOD c_ getFluidState (Lcjr;)Lddq;
	METHOD d_ isRandomlyTicking (Lcjr;)Z
	METHOD f getExplosionResistance ()F
	METHOD f_ useShapeForLightOcclusion (Lcjr;)Z
	METHOD g getStairsShape (Lcjr;Lbuv;Lgb;)Lckz;
	METHOD h isStairs (Lcjr;)Z
	METHOD n getShapeIndex (Lcjr;)I
	CLASS 1 1
		FIELD a $SwitchMap$net$minecraft$world$level$block$state$properties$StairsShape [I
		FIELD b $SwitchMap$net$minecraft$world$level$block$Mirror [I
		METHOD <clinit> <clinit> ()V
