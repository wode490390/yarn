CLASS aep net/minecraft/server/rcon/thread/QueryThreadGs4
	FIELD d LOGGER Lorg/apache/logging/log4j/Logger;
	FIELD e GAME_TYPE Ljava/lang/String;
	FIELD f GAME_ID Ljava/lang/String;
	FIELD g CHALLENGE_CHECK_INTERVAL J
	FIELD h RESPONSE_CACHE_TIME J
	FIELD i lastChallengeCheck J
	FIELD j port I
	FIELD k serverPort I
	FIELD l maxPlayers I
	FIELD m serverName Ljava/lang/String;
	FIELD n worldName Ljava/lang/String;
	FIELD o socket Ljava/net/DatagramSocket;
	FIELD p buffer [B
	FIELD q hostIp Ljava/lang/String;
	FIELD r serverIp Ljava/lang/String;
	FIELD s validChallenges Ljava/util/Map;
	FIELD t rulesResponse Laek;
	FIELD u lastRulesResponse J
	FIELD v serverInterface Lxc;
	METHOD <clinit> <clinit> ()V
	METHOD <init> <init> (Lxc;I)V
	METHOD a start ()Z
	METHOD a lambda$pruneChallenges$0 (JLaep$a;)Z
	METHOD a recoverSocketError (Ljava/lang/Exception;)V
	METHOD a processPacket (Ljava/net/DatagramPacket;)Z
	METHOD a getIdentBytes (Ljava/net/SocketAddress;)[B
	METHOD a create (Lxc;)Laep;
	METHOD a sendTo ([BLjava/net/DatagramPacket;)V
	METHOD b buildRuleResponse (Ljava/net/DatagramPacket;)[B
	METHOD c validChallenge (Ljava/net/DatagramPacket;)Ljava/lang/Boolean;
	METHOD d pruneChallenges ()V
	METHOD d sendChallenge (Ljava/net/DatagramPacket;)V
	METHOD e initSocket ()Z
	METHOD run run ()V
	CLASS a RequestChallenge
		FIELD a time J
		FIELD b challenge I
		FIELD c identBytes [B
		FIELD d challengeBytes [B
		FIELD e ident Ljava/lang/String;
		METHOD <init> <init> (Ljava/net/DatagramPacket;)V
		METHOD a getChallenge ()I
		METHOD a before (J)Ljava/lang/Boolean;
		METHOD b getChallengeBytes ()[B
		METHOD c getIdentBytes ()[B
		METHOD d getIdent ()Ljava/lang/String;
